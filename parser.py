# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tMkYYuazr8kXrAif2YNmbYwuLuR6UPrI
"""

import requests
import pandas as pd
from pprint import pprint
from matplotlib import pyplot as plt
from datetime import datetime
import json

def Info_Deposits(url):
    response = requests.get(url)
    banks_and_procents = {}
    if response.status_code == 200:
        data = response.json()

        for item in data['items']:
            bank_id = item['organization']
            procent = float(item['rate'].replace("до", "").replace("%", "").strip())
            bank_info = data['organizations'][bank_id]
            bank_name = bank_info['name']['short']
            min_deposit = item['amount']['from']
            check_capitalization = item['tags']['haveCapitalization']
            check_replenishment = item['tags']['haveReplenishment']
            replenishment = ""
            capitalization = ""

            if check_replenishment:
              replenishment = "Возможно"
            else:
              replenishment = "Отсутствует"
            if check_capitalization:
              capitalization = item['capitalization']['text']
            else:
              capitalization = "Отсутствует"
            if bank_name not in banks_and_procents:
              banks_and_procents[bank_name] = (procent, procent, capitalization, replenishment, min_deposit)
            else:
              procent_max = banks_and_procents[bank_name][0]
              procent_min = banks_and_procents[bank_name][1]
              if procent > banks_and_procents[bank_name][0]:
                procent_max = procent
              if procent < banks_and_procents[bank_name][1]:
                procent_min = procent
              banks_and_procents[bank_name] = (procent_max, procent_min, capitalization, replenishment, min_deposit)

        sorted_result = sorted(banks_and_procents.items(), key=lambda x: x[1][0], reverse=True)
        sorted_result = [(i[0], *i[1]) for i in sorted_result]
        df = pd.DataFrame(sorted_result, columns=['Название банка', 'Максимальная ставка', 'Минимальная ставка', 'Капитализация', 'Пополнение', 'Минимальный депозит'])
        df['Дата'] = datetime.now().strftime("%d.%m.%Y")  # Добавление столбца с текущей датой
        # Перемещение столбца 'Дата' на первое место
        cols = df.columns.tolist()
        cols = cols[-1:] + cols[:-1]
        df = df[cols]
        df.index += 1
        return (df, data)

"""### **Вклады сроком на 1 месяц**"""

df_deposits_1_month = Info_Deposits("https://public.sravni.ru/v1/deposits/products?productName=vklady&limit=500&offset=0&advertisingOnly=false&location=6.83.&&isMix=false&group=organization&groupLimit=10&sortProperty=popularity&sortDirection=desc&adsAll=true&term=31&types=deposit")[0]
df_deposits_1_month

"""### **Вклады сроком на 3 месяца**"""

df_deposits_3_month = Info_Deposits("https://public.sravni.ru/v1/deposits/products?productName=vklady&limit=500&offset=0&advertisingOnly=false&location=6.83.&&isMix=false&group=organization&groupLimit=10&sortProperty=popularity&sortDirection=desc&adsAll=true&term=91&types=deposit")[0]
df_deposits_3_month

"""### **Вклады сроком на 6 месяцев**"""

df_deposits_6_month = Info_Deposits("https://public.sravni.ru/v1/deposits/products?productName=vklady&limit=500&offset=0&advertisingOnly=false&location=6.83.&&isMix=false&group=organization&groupLimit=10&sortProperty=popularity&sortDirection=desc&adsAll=true&term=183&types=deposit")[0]
df_deposits_6_month

"""### **Вклады сроком на 1 год**"""

df_deposits_1_year = Info_Deposits("https://public.sravni.ru/v1/deposits/products?productName=vklady&limit=500&offset=0&advertisingOnly=false&location=6.83.&&isMix=false&group=organization&groupLimit=10&sortProperty=popularity&sortDirection=desc&adsAll=true&term=365&types=deposit")[0]
df_deposits_1_year

"""### **Вклады сроком на 3 года**"""

df_deposits_3_years = Info_Deposits("https://public.sravni.ru/v1/deposits/products?productName=vklady&limit=500&offset=0&advertisingOnly=false&location=6.83.&&isMix=false&group=organization&groupLimit=10&sortProperty=popularity&sortDirection=desc&adsAll=true&term=1081&types=deposit")[0]
df_deposits_3_years

"""### **Сбор данных в Excel и Json**"""

now = datetime.now()
df_deposits_1_month.to_excel("deposits_1_month_{}_{}_{}.xlsx".format(now.day, now.month, now.year), index=False)
df_deposits_3_month.to_excel("deposits_3_month_{}_{}_{}.xlsx".format(now.day, now.month, now.year), index=False)
df_deposits_6_month.to_excel("deposits_6_month_{}_{}_{}.xlsx".format(now.day, now.month, now.year), index=False)
df_deposits_1_year.to_excel("deposits_1_year_{}_{}_{}.xlsx".format(now.day, now.month, now.year), index=False)
df_deposits_3_years.to_excel("deposits_3_years_{}_{}_{}.xlsx".format(now.day, now.month, now.year), index=False)

data_1 = Info_Deposits("https://public.sravni.ru/v1/deposits/products?productName=vklady&limit=500&offset=0&advertisingOnly=false&location=6.83.&&isMix=false&group=organization&groupLimit=10&sortProperty=popularity&sortDirection=desc&adsAll=true&term=1081&types=deposit")[1]
data_json_1 = json.dumps(data_1, indent=4)
with open("deposits_banks_info_{}_{}_{}.json".format(now.day, now.month, now.year), "w") as outfile:
    outfile.write(data_json_1)

"""### **Спарсим страницу с кредитами**"""

def Info_Loans(url):
    response = requests.get(url)
    banks_and_procents = {}
    if response.status_code == 200:
        data = response.json()

        for item in data['items']:
            bank_id = item['organization']
            procentFrom = item['rateFrom']
            procentTo = item['rateTo']
            min_age = item['loanAge']
            min_sum = item['minSumFrom']
            max_sum = item['maxSumTo']
            bank_info = data['organizations'][bank_id]
            bank_name = bank_info['name']['short']
            banks_and_procents[bank_name] = (procentFrom, procentTo, min_age, min_sum, max_sum)

        sorted_result = sorted(banks_and_procents.items(), key=lambda x: x[1][0], reverse=False)
        sorted_result = [(i[0], *i[1]) for i in sorted_result]
        df = pd.DataFrame(sorted_result, columns=['Название банка', 'Минимальный процент', 'Максимальный процент', 'Минимальный возраст', 'Минимальная сумма', 'Максимальная сумма'])
        df['Дата'] = datetime.now().strftime("%d.%m.%Y")  # Добавление столбца с текущей датой
        # Перемещение столбца 'Дата' на первое место
        cols = df.columns.tolist()
        cols = cols[-1:] + cols[:-1]
        df = df[cols]
        df.index += 1
        return (df, data)

"""### **Кредиты сроком на 1 год**"""

df_loans_1_year = Info_Loans("https://public.sravni.ru/v1/vitrins/products?productName=kredity&limit=500&period=P1Y")[0]
df_loans_1_year

"""### **Кредиты сроком на 3 года**"""

df_loans_3_years = Info_Loans("https://public.sravni.ru/v1/vitrins/products?productName=kredity&limit=500&period=P3Y")[0]
df_loans_3_years

"""### **Кредиты сроком на 5 лет**"""

df_loans_5_years = Info_Loans("https://public.sravni.ru/v1/vitrins/products?productName=kredity&limit=500&period=P5Y")[0]
df_loans_5_years

"""### **Кредиты сроком на 10 лет**"""

df_loans_10_years= Info_Loans("https://public.sravni.ru/v1/vitrins/products?productName=kredity&limit=500&period=P10Y")[0]
df_loans_10_years

now = datetime.now()
df_loans_1_year.to_excel("loans_1_year_{}_{}_{}.xlsx".format(now.day, now.month, now.year), index=False)
df_loans_3_years.to_excel("loans_3_years_{}_{}_{}.xlsx".format(now.day, now.month, now.year), index=False)
df_loans_5_years.to_excel("loans_5_years_{}_{}_{}.xlsx".format(now.day, now.month, now.year), index=False)
df_loans_10_years.to_excel("loans_10_years_{}_{}_{}.xlsx".format(now.day, now.month, now.year), index=False)

data_2 = Info_Loans("https://public.sravni.ru/v1/vitrins/products?productName=kredity&limit=500")[1]
data_json_2 = json.dumps(data_2, indent=4)
with open("loans_banks_info_{}_{}_{}.json".format(now.day, now.month, now.year), "w") as outfile:
    outfile.write(data_json_2)